<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.fu</groupId>
    <artifactId>spring-boot3-demo</artifactId>
    <version>1</version>

    <!-- 没有跟demo-maven作为父子项目，而是以SpringBoot作为父项目 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>21</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <springdoc-openapi-starter-webmvc-ui.version>2.5.0</springdoc-openapi-starter-webmvc-ui.version>
        <mybatis-plus-spring-boot3-starter.version>3.5.6</mybatis-plus-spring-boot3-starter.version>
    </properties>

    <dependencies>
        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>
        <!-- 内容协商支持返回xml格式 -->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
        <!-- web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 测试类 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- 配置注释器 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- 参数校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- mysql -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- MyBatis-Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <!-- Spring Boot2及以下用的是 mybatis-plus-boot-starter，Spring Boot3开始用 mybatis-plus-spring-boot3-starter -->
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus-spring-boot3-starter.version}</version>
        </dependency>
        <!-- cache 本地缓存【不引入 caffeine 默认用java自带的 ConcurrentHashMap 】 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <!-- caffeine 本地缓存 -->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>
        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- 集成Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc-openapi-starter-webmvc-ui.version}</version>
        </dependency>
        <!-- RestClient 和 RestTemplate 使用 Apache httpclient5 连接池-->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- AOT Graalvm native maven 插件 -->
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <configuration>
                    <skipNativeTests>true</skipNativeTests>
                </configuration>
            </plugin>
            <!-- maven 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!-- 指定编码 -->
                    <encoding>UTF-8</encoding>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!-- 指定要针对哪个 Java SE 版本构建项目 -->
                    <release>${java.version}</release>
                    <fork>true</fork>
                    <!-- 传给 javac 的参数 -->
                    <compilerArgs>
                        <!-- 启用 jdk8+ 参数 parameters【编译前后方法的参数名称一致】 -->
                        <arg>-parameters</arg>
                        <!-- 启用 21 参数 enable-preview【使用预览功能】 -->
                        <arg>--enable-preview</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <!-- Spring Boot Maven 插件【前面设置了版本就会替换掉 spring-boot-maven-plugin 里默认的版本号】 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <addResources>true</addResources>
                    <excludes>
                        <!--不打包lombok，因为lombok只在编译时使用，编译后就没用了-->
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-test</artifactId>
                        </exclude>
                        <!-- 排除 log4j -->
                        <exclude>
                            <groupId>org.apache.logging.log4j</groupId>
                            <artifactId>log4j-api</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.apache.logging.log4j</groupId>
                            <artifactId>log4j-to-slf4j</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- 用 Dockerfile 把 Spring Boot 项目打包成 docker image 的 maven 插件【需要先clean 和 package 把 Spring Boot 项目打包成jar包】 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <configuration>
                    <dockerfile>./Dockerfile</dockerfile>
                    <!-- 不缓存 -->
                    <noCache>true</noCache>
                    <!-- image 版本号 -->
                    <tag>${project.version}</tag>
                    <!-- 传入 Dockerfile 的构建参数 -->
                    <buildArgs>
                        <JAR_NAME>${project.build.finalName}</JAR_NAME>
                        <!-- 通用 JRE 镜像 jre-${java.version}-slim-glibc 【推荐bellsoft 的 jre docker image，因为打出来的images比较小】 -->
                        <JDK>bellsoft/liberica-runtime-container:jre-21.0.3-slim-glibc</JDK>
                    </buildArgs>
                    <!-- docker 远程仓库地址【使用dockerfile:push的时候会使用】 -->
                    <repository>localhost:5000/${project.artifactId}</repository>
                    <!-- docker 远程仓库用户名 -->
                    <username>username</username>
                    <!-- docker 远程仓库密码 -->
                    <password>password</password>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!-- 排除打包文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.yml</exclude>
                    <exclude>application*.properties</exclude>
                </excludes>
            </resource>
            <!-- 打包需要的文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <!-- 解决yml配置@spring.profiles.active@时编译后没有生成对应环境的问题 -->
                <filtering>true</filtering>
                <!-- 只打包具体的环境，不打包其它环境的配置文件 -->
                <includes>
                    <include>**/*.xml</include>
                    <include>application.yml</include>
                    <include>application-${spring.profiles.active}*.yml</include>
                    <include>application.properties</include>
                    <include>application-${spring.profiles.active}*.properties</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!-- 环境配置 -->
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <!--  默认激活-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>

        <profile>
            <id>native</id>
            <activation>
                <!--  默认激活-->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
        </profile>

        <profile>
            <id>test</id>
            <properties>
                <spring.profiles.active>test</spring.profiles.active>
            </properties>
        </profile>
    </profiles>

</project>